* * * * * * * * * * * * * * * * * * * * * * * * * *
Questa è una traccia non ufficiale, ricavata dal
tema d'esame del 2016.07.07 (molto simile).

In caso di errori contattare
	- emanuele.nardi@studenti.unitn.it
	- andrea.arighi@studenti.unitn.it

In ogni caso sostituire questa traccia non appena
quella "ufficiale" verrà pubblicata sul sito di Abeni

* * * * * * * * * * * * * * * * * * * * * * * * * *

Si consideri il tipo di dato

datatype lambda_expr = Var of string
					 | Lambda of string * lambda_expr
					 | Apply of lambda_expr * lambda_expr;

che rappresenta un'espressione del Lambda-calcolo.

Il costruttore Var crea un'espressione costituita da un'unica funzione / variabile (il cui nome e' un valore di tipo string);
il costruttore Lambda crea una Lambda-espressione a partire da un'altra espressione, legandone una variabile (indicata da un valore di tipo string);
il costruttore Apply crea un'espressione data dall'applicazione di un'espressione ad un'altra.

Si scriva una funzione is_bound (avente tipo string -> lambda_expr -> bool) che riceve come argomenti una stringa (che rappresenta il nome di una variabile / funzione) ed una Lambda-espressione,
ritornando true se la variabile indicata è legata nell'espressione,
false altrimenti.

Come esempio, l'invocazione

	is_bound "a" (Var "a")

deve avere risultato false, l'invocazione

	is_bound "b" (Var "a")

deve avere risultato false, l'invocazione

	is_bound "a" (Lambda ("a", Apply((Var "a"), Var "b")))

deve avere risultato true, l'invocazione

	is_bound "b" (Lambda ("a", Apply((Var "a"), Var "b")))

deve avere risultato false e cosi' via.

IMPORTANTE: notare il tipo della funzione! La funzione usa la tecnica del currying per gestire i due argomenti.

La funzione is_bound deve essere definita in un file .sml separato dalla definizione del tipo di dato lambda_expr. Si consegni il file .sml contenente la definizione di is_bound.